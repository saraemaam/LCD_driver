/*****************************************************************
 * Module      : LCD module
 * File name   : lcd.c
 * Description : Lcd driver to implement configurable LCD driver to
 *              work with any lcd
 * Author      : Sarah
 ****************************************************************/

#include "gpio.h"
#include "lcd.h"
#include "common_macros.h"
#include<util/delay.h>

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Description:
 * Initialize LCD :
 * 1.by setting up the direction using GPIO driver
 * 2.set up LCD data bit mode 8bit or 4bit mode
 * */
void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);

	/* LCD Power ON delay always > 15ms */
	_delay_ms(20);

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
}

/*
 * Description: send required commands to the LCD
 */
void LCD_sendCommand (uint8 command)
{
	/*Clear RS pin (to write command)*/
	GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_LOW);
	/* delay for processing Tas = 50ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	GPIO_writePin(PORTD_ID, PIN5_ID, LOGIC_HIGH);
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);

#if (LCD_DATA_BITS_MODE == 4)
	/*in 4 Bit mode we have to send the command MSB 4 bits then LSB 4 bits */
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID,GET_BIT(command,4));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));

	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	/* delay for processing Th = 13ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);
	/*send the LSB 4 bits command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));

	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	/* delay for processing Th = 13ns */
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 8)
	/*Send the command directly*/
	GPIO_writePort(LCD_DATA_PORT_ID,command);
	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	/* delay for processing Th = 13ns */
	_delay_ms(1);

#endif

}





void Lcd_display_character(uint8 data)
{

	//Clear RS pin (to write command)
	GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_HIGH);

	//delay  Tas time=50nsec
	_delay_ms(1);

	//set enable bit
	GPIO_writePin(PORTD_ID, PIN5_ID, LOGIC_HIGH);

	//delay 190nsec
	_delay_ms(1);

	//Send command to PORTC
	GPIO_writePort(PORTC_ID, data);

	//delay 100nsec
	_delay_ms(1);

	//Clear Enable pin
	GPIO_writePin(PORTD_ID, PIN5_ID, LOGIC_LOW);

	//delay 13nsec
	_delay_ms(1);

}

void Lcd_display_string(uint8*string)
{

	uint8 i=0;

	for (i=0;string[i] !='\0';i++)
	{
		Lcd_display_character(string[i]);
	}

}
